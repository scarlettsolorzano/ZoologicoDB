@page "/personas"
@rendermode InteractiveServer
@inject NavigationManager _navigator
@inject IRepositorioPersonas _repositorio
<h3>Trabajadores</h3>
<a class="btn btn-success" href="personas/nueva">Agregar Trabajador</a>
<a class="btn btn-success" href="areas">Ver áreas</a>
<a class="btn btn-success" href="animales">Ver animales</a>
@if (_personas == null)
{
    <div class="spinner-border" role="status">
        <span class="visually-hidden">Cargando...</span>
    </div>
}
else if (_personas.Count == 0)
{
    <h3>No hay trabajadores registrados</h3>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Nombre</th>
                <th>Telefono</th>
                <th>Área</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var persona in _personas)
            {
                <tr>
                    <td>@persona.Nombre</td>
                    <td>@persona.Telefono</td>
                    <td>@persona.Area!.Nombre</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => Modificar(persona.Id)">Modificar</button>
                        <button class="btn btn-danger" @onclick="() => Eliminar(persona)">Eliminar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Persona>? _personas;
    private List<Area>? _areas;

    protected override async Task OnInitializedAsync()
    {
        _personas = await _repositorio.GetAll();
        _areas = await _repositorio.GetAreas();
    }

    private async void Eliminar(Persona persona)
    {
        await _repositorio.Delete(persona.Id);
        _personas!.Remove(persona);
        StateHasChanged();
    }

    private void Modificar(int id)
    {
        _navigator.NavigateTo($"/personas/editar/{id}");

    }
}
